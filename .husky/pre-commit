#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Type Error Check for Changed Files
echo "🔍 Checking TypeScript errors in changed files..."

# Get list of changed TypeScript files
CHANGED_FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep -E '\.(ts|tsx)$' || true)

if [ -n "$CHANGED_FILES" ]; then
  # Create a temporary file with just the changed files
  TEMP_TSCONFIG=$(mktemp)
  cat > "$TEMP_TSCONFIG" << EOF
{
  "extends": "./tsconfig.json",
  "include": [
$(echo "$CHANGED_FILES" | sed 's/^/    "/' | sed 's/$/",/')
    "lib/**/*",
    "types/**/*"
  ]
}
EOF

  # Count errors in changed files
  ERROR_COUNT=$(npx tsc -p "$TEMP_TSCONFIG" --noEmit 2>&1 | grep -c "error TS" || echo "0")
  
  # Clean up
  rm "$TEMP_TSCONFIG"
  
  if [ "$ERROR_COUNT" -gt "0" ]; then
    echo "❌ Found $ERROR_COUNT TypeScript errors in changed files!"
    echo ""
    echo "Options:"
    echo "1. Fix the errors before committing"
    echo "2. Use --no-verify to skip this check (not recommended)"
    echo "3. If these are existing errors, consider fixing them in this commit"
    echo ""
    
    # Show errors
    echo "Errors found:"
    echo "$CHANGED_FILES" | while read -r file; do
      if [ -f "$file" ]; then
        npx tsc --noEmit "$file" 2>&1 | grep "error TS" | head -5 || true
      fi
    done
    
    # Ask for confirmation
    read -p "Do you want to proceed anyway? [y/N] " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      exit 1
    fi
  else
    echo "✅ No new TypeScript errors in changed files"
  fi
fi

# Run other checks
npm run lint:staged --silent || true