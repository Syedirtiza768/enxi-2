// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  role      Role     @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Sales team hierarchy
  managerId    String?
  manager      User?   @relation("SalesTeamHierarchy", fields: [managerId], references: [id])
  managedUsers User[]  @relation("SalesTeamHierarchy")

  // Relations
  auditLogs         AuditLog[]
  leads             Lead[]
  profile           UserProfile?
  sessions          UserSession[]
  userPermissions   UserPermission[]
  assignedCustomers Customer[]       @relation("CustomerAssignment")
  salesTeamMember   SalesTeamMember?

  @@index([username])
  @@index([email])
  @@index([managerId])
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String // CREATE, READ, UPDATE, DELETE, etc.
  entityType String // User, Lead, SalesCase, etc.
  entityId   String
  metadata   Json? // Additional context
  beforeData Json? // State before change
  afterData  Json? // State after change
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entityType, entityId])
  @@index([action])
  @@index([timestamp])
}

model Lead {
  id        String     @id @default(cuid())
  firstName String
  lastName  String
  email     String
  phone     String?
  company   String?
  jobTitle  String?
  source    LeadSource @default(WEBSITE)
  status    LeadStatus @default(NEW)
  notes     String?

  // Audit fields
  createdBy String
  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  creator  User      @relation(fields: [createdBy], references: [id])
  customer Customer? // When lead is converted

  @@index([email])
  @@index([status])
  @@index([source])
  @@index([createdBy])
  @@index([createdAt])
}

// Customer model - converted from Lead
model Customer {
  id             String  @id @default(cuid())
  customerNumber String  @unique
  name           String
  email          String  @unique
  phone          String?
  industry       String?
  website        String?
  address        String?
  taxId          String?
  currency       String  @default("USD")
  creditLimit    Float   @default(0)
  paymentTerms   Int     @default(30) // Days

  // Link to original lead
  leadId String? @unique
  lead   Lead?   @relation(fields: [leadId], references: [id])

  // Sales team assignment
  assignedToId    String?
  assignedTo      User?     @relation("CustomerAssignment", fields: [assignedToId], references: [id])
  assignedAt      DateTime?
  assignedBy      String?
  assignmentNotes String?

  // Audit fields
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  salesCases  SalesCase[]
  invoices    Invoice[]
  payments    Payment[]
  customerPOs CustomerPO[]
  accountId   String?      @unique // Link to AR account
  account     Account?     @relation(fields: [accountId], references: [id])

  @@index([email])
  @@index([createdAt])
  @@index([assignedToId])
}

// Sales Case model
model SalesCase {
  id          String          @id @default(cuid())
  caseNumber  String          @unique
  customerId  String
  customer    Customer        @relation(fields: [customerId], references: [id])
  title       String
  description String?
  status      SalesCaseStatus @default(OPEN)

  // Financial tracking
  estimatedValue Float @default(0)
  actualValue    Float @default(0)
  cost           Float @default(0)
  profitMargin   Float @default(0)

  // Audit fields
  createdBy  String
  assignedTo String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  closedAt   DateTime?

  // Relations
  quotations  Quotation[]
  salesOrders SalesOrder[]
  expenses    CaseExpense[]
  customerPOs CustomerPO[]

  @@index([customerId])
  @@index([status])
  @@index([createdAt])
}

// Chart of Accounts
model Account {
  id          String      @id @default(cuid())
  code        String      @unique
  name        String
  type        AccountType
  currency    String      @default("USD")
  description String?
  parentId    String?
  parent      Account?    @relation("AccountHierarchy", fields: [parentId], references: [id])
  children    Account[]   @relation("AccountHierarchy")

  // Balance tracking
  balance Float @default(0)

  // System flags
  status          AccountStatus @default(ACTIVE)
  isSystemAccount Boolean       @default(false)

  // Audit fields
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  journalLines      JournalLine[]
  customer          Customer?
  supplier          Supplier?     @relation("SupplierAccount")
  itemsInventory    Item[]        @relation("ItemInventoryAccount")
  itemsCogs         Item[]        @relation("ItemCogsAccount")
  itemsSales        Item[]        @relation("ItemSalesAccount")
  caseExpenses      CaseExpense[]
  locations         Location[]    @relation("LocationInventoryAccount")
  taxRatesCollected TaxRate[]     @relation("TaxCollectedAccount")
  taxRatesPaid      TaxRate[]     @relation("TaxPaidAccount")

  @@index([code])
  @@index([type])
  @@index([parentId])
}

// Journal Entries
model JournalEntry {
  id           String   @id @default(cuid())
  entryNumber  String   @unique
  date         DateTime
  description  String
  reference    String? // External reference (invoice#, PO#, etc.)
  currency     String   @default("USD")
  exchangeRate Float    @default(1.0)

  // Status tracking
  status JournalStatus @default(DRAFT)

  // Audit fields
  createdBy String
  postedBy  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  postedAt  DateTime?

  // Relations
  lines            JournalLine[]
  stockMovements   StockMovement[]
  caseExpenses     CaseExpense[]
  supplierInvoices SupplierInvoice[]
  supplierPayments SupplierPayment[]

  @@index([date])
  @@index([status])
  @@index([reference])
}

// Journal Entry Lines
model JournalLine {
  id             String       @id @default(cuid())
  journalEntryId String
  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)

  accountId String
  account   Account @relation(fields: [accountId], references: [id])

  description  String?
  debitAmount  Float   @default(0)
  creditAmount Float   @default(0)

  // Multi-currency support
  currency         String @default("USD")
  exchangeRate     Float  @default(1.0)
  baseDebitAmount  Float  @default(0) // Amount in base currency
  baseCreditAmount Float  @default(0) // Amount in base currency

  @@index([journalEntryId])
  @@index([accountId])
}

// Quotation model
model Quotation {
  id              String    @id @default(cuid())
  quotationNumber String    @unique
  salesCaseId     String
  salesCase       SalesCase @relation(fields: [salesCaseId], references: [id])

  version    Int             @default(1)
  status     QuotationStatus @default(DRAFT)
  validUntil DateTime

  // Pricing
  subtotal       Float @default(0)
  taxAmount      Float @default(0)
  discountAmount Float @default(0)
  totalAmount    Float @default(0)

  // Terms
  paymentTerms  String?
  deliveryTerms String?
  notes         String?
  internalNotes String? // Internal notes not visible to clients

  // Audit fields
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  items       QuotationItem[]
  salesOrders SalesOrder[]
  customerPOs CustomerPO[]

  @@index([salesCaseId])
  @@index([status])
  @@index([createdAt])
}

// Quotation line items
model QuotationItem {
  id          String    @id @default(cuid())
  quotationId String
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)

  // Line grouping
  lineNumber      Int     @default(1) // Groups items into lines
  lineDescription String? // Description for the line (shown to client)
  isLineHeader    Boolean @default(false) // First item in each line

  // Item type
  itemType ItemType @default(PRODUCT) // PRODUCT or SERVICE

  // Item details (can be linked item or free-form)
  itemId              String? // Optional link to Item master
  item                Item?    @relation("QuotationItemProduct", fields: [itemId], references: [id])
  itemCode            String // For display and free-form items
  description         String
  internalDescription String? // Internal description not visible to clients
  quantity            Float    @default(1)
  unitPrice           Float    @default(0)
  cost                Float?   @default(0) // Cost per unit for margin calculation
  discount            Float    @default(0) // Percentage
  taxRate             Float    @default(0) // Percentage
  taxRateId           String? // Link to tax configuration
  taxRateConfig       TaxRate? @relation("QuotationItemTaxRate", fields: [taxRateId], references: [id])

  // Unit of measure
  unitOfMeasureId String?
  unitOfMeasure   UnitOfMeasure? @relation("QuotationItemUoM", fields: [unitOfMeasureId], references: [id])

  // Calculated amounts
  subtotal       Float @default(0)
  discountAmount Float @default(0)
  taxAmount      Float @default(0)
  totalAmount    Float @default(0)

  // Inventory availability (calculated at quotation time)
  availabilityStatus String? // IN_STOCK, INSUFFICIENT_STOCK, OUT_OF_STOCK
  availableQuantity  Float? // Available quantity at quotation time

  // Sort order
  sortOrder Int @default(0)

  @@index([quotationId])
  @@index([itemId])
}

// Sales Order - Converted from accepted quotations
model SalesOrder {
  id          String     @id @default(cuid())
  orderNumber String     @unique
  quotationId String? // Link to original quotation
  quotation   Quotation? @relation(fields: [quotationId], references: [id])
  salesCaseId String
  salesCase   SalesCase  @relation(fields: [salesCaseId], references: [id])

  // Order details
  status        OrderStatus @default(PENDING)
  orderDate     DateTime    @default(now())
  requestedDate DateTime? // Customer requested delivery date
  promisedDate  DateTime? // Company promised delivery date

  // Financial totals
  subtotal       Float @default(0)
  taxAmount      Float @default(0)
  discountAmount Float @default(0)
  shippingAmount Float @default(0)
  totalAmount    Float @default(0)

  // Payment and shipping terms
  paymentTerms    String?
  shippingTerms   String?
  shippingAddress String?
  billingAddress  String?

  // Internal notes and references
  customerPO String? // Customer's purchase order number
  notes      String?

  // Order fulfillment tracking
  fulfilledAmount Float @default(0)
  shippedAmount   Float @default(0)
  invoicedAmount  Float @default(0)

  // Audit fields
  createdBy          String
  approvedBy         String?
  approvedAt         DateTime?
  cancelledBy        String?
  cancelledAt        DateTime?
  cancellationReason String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  items                 SalesOrderItem[]
  shipments             Shipment[]
  invoices              Invoice[]
  stockReservations     StockReservation[] @relation("OrderStockReservations")
  customerPurchaseOrder CustomerPO?

  @@index([salesCaseId])
  @@index([status])
  @@index([orderDate])
  @@index([quotationId])
}

// Sales Order line items
model SalesOrderItem {
  id           String     @id @default(cuid())
  salesOrderId String
  salesOrder   SalesOrder @relation(fields: [salesOrderId], references: [id], onDelete: Cascade)

  // Item details
  itemId        String? // Optional link to Item master
  item          Item?    @relation("SalesOrderItemProduct", fields: [itemId], references: [id])
  itemCode      String
  description   String
  quantity      Float    @default(1)
  unitPrice     Float    @default(0)
  discount      Float    @default(0) // Percentage
  taxRate       Float    @default(0) // Percentage
  taxRateId     String? // Link to tax configuration
  taxRateConfig TaxRate? @relation("SalesOrderItemTaxRate", fields: [taxRateId], references: [id])

  // Unit of measure
  unitOfMeasureId String?
  unitOfMeasure   UnitOfMeasure? @relation("SalesOrderItemUoM", fields: [unitOfMeasureId], references: [id])

  // Calculated amounts
  subtotal       Float @default(0)
  discountAmount Float @default(0)
  taxAmount      Float @default(0)
  totalAmount    Float @default(0)

  // Fulfillment tracking
  quantityReserved Float @default(0)
  quantityShipped  Float @default(0)
  quantityInvoiced Float @default(0)

  // Sort order
  sortOrder Int @default(0)

  // Relations
  stockReservations StockReservation[] @relation("OrderItemStockReservations")

  @@index([salesOrderId])
  @@index([itemId])
}

// Shipments for tracking deliveries
model Shipment {
  id             String     @id @default(cuid())
  shipmentNumber String     @unique
  salesOrderId   String
  salesOrder     SalesOrder @relation(fields: [salesOrderId], references: [id])

  // Shipment details
  status         ShipmentStatus @default(PREPARING)
  shipmentDate   DateTime?
  trackingNumber String?
  carrier        String?
  shippingMethod String?
  shippingCost   Float          @default(0)

  // Addresses
  shipToAddress   String
  shipFromAddress String?

  // Audit fields
  createdBy   String
  shippedBy   String?
  deliveredBy String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  shippedAt   DateTime?
  deliveredAt DateTime?

  // Relations
  items ShipmentItem[]

  @@index([salesOrderId])
  @@index([status])
  @@index([shipmentDate])
}

// Shipment line items
model ShipmentItem {
  id               String   @id @default(cuid())
  shipmentId       String
  shipment         Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  salesOrderItemId String

  // Item details
  itemId          String
  item            Item   @relation("ShipmentItemProduct", fields: [itemId], references: [id])
  itemCode        String
  description     String
  quantityShipped Float

  @@index([shipmentId])
  @@index([salesOrderItemId])
}

// Invoice model
model Invoice {
  id            String      @id @default(cuid())
  invoiceNumber String      @unique
  salesOrderId  String?
  salesOrder    SalesOrder? @relation(fields: [salesOrderId], references: [id])
  customerId    String
  customer      Customer    @relation(fields: [customerId], references: [id])

  // Invoice details
  type        InvoiceType   @default(SALES)
  status      InvoiceStatus @default(DRAFT)
  invoiceDate DateTime      @default(now())
  dueDate     DateTime

  // Financial totals
  subtotal       Float @default(0)
  taxAmount      Float @default(0)
  discountAmount Float @default(0)
  totalAmount    Float @default(0)
  paidAmount     Float @default(0)
  balanceAmount  Float @default(0)

  // Terms and addresses
  paymentTerms   String?
  billingAddress String?
  notes          String?

  // Audit fields
  createdBy String
  sentBy    String?
  sentAt    DateTime?
  paidAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  items    InvoiceItem[]
  payments Payment[]

  @@index([customerId])
  @@index([status])
  @@index([invoiceDate])
  @@index([dueDate])
}

// Invoice line items
model InvoiceItem {
  id        String  @id @default(cuid())
  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  // Item details
  itemId        String?
  item          Item?    @relation("InvoiceItemProduct", fields: [itemId], references: [id])
  itemCode      String
  description   String
  quantity      Float    @default(1)
  unitPrice     Float    @default(0)
  discount      Float    @default(0)
  taxRate       Float    @default(0)
  taxRateId     String? // Link to tax configuration
  taxRateConfig TaxRate? @relation("InvoiceItemTaxRate", fields: [taxRateId], references: [id])

  // Calculated amounts
  subtotal       Float @default(0)
  discountAmount Float @default(0)
  taxAmount      Float @default(0)
  totalAmount    Float @default(0)

  @@index([invoiceId])
  @@index([itemId])
}

// Payment tracking
model Payment {
  id            String   @id @default(cuid())
  paymentNumber String   @unique
  invoiceId     String
  invoice       Invoice  @relation(fields: [invoiceId], references: [id])
  customerId    String
  customer      Customer @relation(fields: [customerId], references: [id])

  // Payment details
  amount        Float
  paymentDate   DateTime      @default(now())
  paymentMethod PaymentMethod @default(BANK_TRANSFER)
  reference     String? // Check number, transaction ID, etc.
  notes         String?

  // Audit fields
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([invoiceId])
  @@index([customerId])
  @@index([paymentDate])
}

enum Role {
  SUPER_ADMIN // Full system access
  ADMIN // Admin access (can manage users)
  MANAGER // Can manage teams and approve
  SALES_REP // Sales operations
  ACCOUNTANT // Financial operations
  WAREHOUSE // Inventory operations
  VIEWER // Read-only access
  USER // Basic user (deprecated - for backward compatibility)
}

enum LeadSource {
  WEBSITE
  REFERRAL
  SOCIAL_MEDIA
  EMAIL_CAMPAIGN
  PHONE_CALL
  TRADE_SHOW
  ADVERTISING
  OTHER
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL_SENT
  NEGOTIATING
  CONVERTED
  LOST
  DISQUALIFIED
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  INCOME
  EXPENSE
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SYSTEM
}

enum JournalStatus {
  DRAFT
  POSTED
  CANCELLED
}

enum SalesCaseStatus {
  OPEN
  IN_PROGRESS
  WON
  LOST
  CANCELLED
}

enum QuotationStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
  CANCELLED
}

enum OrderStatus {
  PENDING // Order created, awaiting approval
  APPROVED // Order approved, ready for fulfillment
  PROCESSING // Order being processed/manufactured
  SHIPPED // Order shipped (partially or fully)
  DELIVERED // Order delivered to customer
  INVOICED // Order fully invoiced
  COMPLETED // Order completed successfully
  CANCELLED // Order cancelled
  ON_HOLD // Order temporarily on hold
}

enum ShipmentStatus {
  PREPARING // Shipment being prepared
  READY // Ready to ship
  SHIPPED // Shipped to customer
  IN_TRANSIT // In transit
  DELIVERED // Delivered to customer
  RETURNED // Returned by customer
  CANCELLED // Shipment cancelled
}

enum InvoiceType {
  SALES // Sales invoice
  CREDIT_NOTE // Credit note/refund
  DEBIT_NOTE // Debit note/additional charge
  PROFORMA // Proforma invoice
}

enum InvoiceStatus {
  DRAFT // Invoice being prepared
  SENT // Invoice sent to customer
  VIEWED // Customer viewed invoice
  PARTIAL // Partially paid
  PAID // Fully paid
  OVERDUE // Payment overdue
  CANCELLED // Invoice cancelled
  REFUNDED // Invoice refunded
}

enum PaymentMethod {
  CASH
  CHECK
  BANK_TRANSFER
  CREDIT_CARD
  DEBIT_CARD
  WIRE_TRANSFER
  ONLINE
  OTHER
}

enum ExpenseStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
  PAID
  CANCELLED
}

// Inventory Management Models

// Item Categories - Hierarchical structure
model Category {
  id          String     @id @default(cuid())
  code        String     @unique
  name        String
  description String?
  parentId    String?
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")

  // System flags
  isActive Boolean @default(true)

  // Audit fields
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  items Item[]

  @@index([code])
  @@index([parentId])
}

// Units of Measure
model UnitOfMeasure {
  id          String  @id @default(cuid())
  code        String  @unique
  name        String
  description String?
  symbol      String? // Display symbol (kg, m, pcs, etc.)

  // Base unit conversion
  baseUnitId       String?
  baseUnit         UnitOfMeasure?  @relation("UoMConversion", fields: [baseUnitId], references: [id])
  derivedUnits     UnitOfMeasure[] @relation("UoMConversion")
  conversionFactor Float           @default(1.0) // Factor to convert to base unit

  // System flags
  isActive   Boolean @default(true)
  isBaseUnit Boolean @default(false)

  // Audit fields
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  items              Item[]
  stockMovements     StockMovement[]
  quotationItems     QuotationItem[]     @relation("QuotationItemUoM")
  salesOrderItems    SalesOrderItem[]    @relation("SalesOrderItemUoM")
  purchaseOrderItems PurchaseOrderItem[] @relation("POItemUoM")

  @@index([code])
}

// Item Master (Products and Services)
model Item {
  id          String  @id @default(cuid())
  code        String  @unique
  name        String
  description String?

  // Classification
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  type       ItemType @default(PRODUCT)

  // Specifications
  unitOfMeasureId String
  unitOfMeasure   UnitOfMeasure @relation(fields: [unitOfMeasureId], references: [id])

  // Inventory tracking
  trackInventory Boolean @default(true) // False for services
  minStockLevel  Float   @default(0)
  maxStockLevel  Float   @default(0)
  reorderPoint   Float   @default(0)

  // Pricing
  standardCost Float @default(0) // Standard cost for costing
  listPrice    Float @default(0) // Default selling price

  // GL Integration
  inventoryAccountId String? // Asset account for inventory
  inventoryAccount   Account? @relation("ItemInventoryAccount", fields: [inventoryAccountId], references: [id])
  cogsAccountId      String? // Cost of Goods Sold account
  cogsAccount        Account? @relation("ItemCogsAccount", fields: [cogsAccountId], references: [id])
  salesAccountId     String? // Revenue account
  salesAccount       Account? @relation("ItemSalesAccount", fields: [salesAccountId], references: [id])

  // System flags
  isActive       Boolean @default(true)
  isSaleable     Boolean @default(true)
  isPurchaseable Boolean @default(true)

  // Audit fields
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  stockMovements     StockMovement[]
  stockLots          StockLot[]
  stockReservations  StockReservation[]  @relation("ItemStockReservations")
  quotationItems     QuotationItem[]     @relation("QuotationItemProduct")
  salesOrderItems    SalesOrderItem[]    @relation("SalesOrderItemProduct")
  shipmentItems      ShipmentItem[]      @relation("ShipmentItemProduct")
  invoiceItems       InvoiceItem[]       @relation("InvoiceItemProduct")
  purchaseOrderItems PurchaseOrderItem[] @relation("POItemProduct")
  goodsReceiptItems  GoodsReceiptItem[]  @relation("ReceiptItemProduct")
  inventoryBalances  InventoryBalance[]  @relation("ItemLocationBalances")
  stockTransferItems StockTransferItem[] @relation("ItemStockTransfers")
  physicalCountItems PhysicalCountItem[] @relation("ItemPhysicalCounts")

  @@index([code])
  @@index([categoryId])
  @@index([type])
}

// Stock Lots for FIFO tracking
model StockLot {
  id        String @id @default(cuid())
  lotNumber String @unique
  itemId    String
  item      Item   @relation(fields: [itemId], references: [id])

  // Lot details
  receivedDate DateTime
  expiryDate   DateTime?
  supplierName String? // Supplier reference
  supplierId   String? // Supplier ID reference
  purchaseRef  String? // Purchase order/invoice reference

  // Quantities
  receivedQty  Float
  availableQty Float // Current available quantity
  reservedQty  Float @default(0) // Reserved for sales orders

  // Costing
  unitCost  Float // Cost per unit for this lot
  totalCost Float // Total cost of this lot

  // System flags
  isActive Boolean @default(true)

  // Audit fields
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  stockMovements     StockMovement[]
  supplier           Supplier?           @relation("SupplierStockLots", fields: [supplierId], references: [id])
  locationStockLots  LocationStockLot[]  @relation("LotLocationStock")
  stockTransferItems StockTransferItem[] @relation("LotStockTransfers")
  physicalCountItems PhysicalCountItem[] @relation("LotPhysicalCounts")

  @@index([itemId])
  @@index([receivedDate])
  @@index([availableQty])
}

// Stock Movements - All inventory transactions
model StockMovement {
  id             String @id @default(cuid())
  movementNumber String @unique

  // Item and lot
  itemId     String
  item       Item      @relation(fields: [itemId], references: [id])
  stockLotId String?
  stockLot   StockLot? @relation(fields: [stockLotId], references: [id])

  // Movement details
  movementType MovementType
  movementDate DateTime
  quantity     Float // Positive for IN, Negative for OUT
  unitCost     Float        @default(0)
  totalCost    Float        @default(0)

  // Units
  unitOfMeasureId String
  unitOfMeasure   UnitOfMeasure @relation(fields: [unitOfMeasureId], references: [id])

  // Reference information
  referenceType   String? // 'PURCHASE', 'SALE', 'ADJUSTMENT', 'TRANSFER'
  referenceId     String? // ID of source document
  referenceNumber String? // Human readable reference

  // Location tracking
  locationId   String?
  location     Location? @relation("LocationStockMovements", fields: [locationId], references: [id])
  locationName String? // Location description for legacy support

  // GL Integration
  journalEntryId String?
  journalEntry   JournalEntry? @relation(fields: [journalEntryId], references: [id])
  goodsReceiptId String?
  goodsReceipt   GoodsReceipt? @relation("ReceiptStockMovements", fields: [goodsReceiptId], references: [id])

  // Notes and approval
  notes      String?
  approvedBy String?
  approvedAt DateTime?

  // Audit fields
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([itemId])
  @@index([movementType])
  @@index([movementDate])
  @@index([referenceType, referenceId])
}

// Enums for Inventory
enum ItemType {
  PRODUCT // Physical goods
  SERVICE // Services
  ASSEMBLY // Bill of materials (future)
}

enum MovementType {
  STOCK_IN // Purchase, production, adjustment in
  STOCK_OUT // Sale, consumption, adjustment out
  TRANSFER // Location transfer (future)
  ADJUSTMENT // Stock adjustments
  OPENING // Opening balance
}

// Stock Reservation model for sales order allocation
model StockReservation {
  id               String          @id @default(cuid())
  itemId           String
  item             Item            @relation("ItemStockReservations", fields: [itemId], references: [id])
  salesOrderId     String
  salesOrder       SalesOrder      @relation("OrderStockReservations", fields: [salesOrderId], references: [id])
  salesOrderItemId String?
  salesOrderItem   SalesOrderItem? @relation("OrderItemStockReservations", fields: [salesOrderItemId], references: [id])

  // Reservation details
  quantityReserved Float
  status           ReservationStatus @default(ACTIVE)

  // Audit fields
  reservedBy String
  reservedAt DateTime  @default(now())
  releasedBy String?
  releasedAt DateTime?
  expiresAt  DateTime?
  notes      String?

  @@index([itemId])
  @@index([salesOrderId])
  @@index([status])
  @@index([reservedAt])
}

enum ReservationStatus {
  ACTIVE
  RELEASED
  EXPIRED
  CONSUMED
  CANCELLED
}

// Exchange Rates for multi-currency support
model ExchangeRate {
  id           String   @id @default(cuid())
  fromCurrency String // Source currency (e.g., "EUR")
  toCurrency   String // Target currency (e.g., "USD")
  rate         Float // Exchange rate (1 fromCurrency = rate * toCurrency)
  rateDate     DateTime // Date the rate is effective
  source       String   @default("manual") // "manual", "api", "bank", etc.
  isActive     Boolean  @default(true)

  // Audit fields
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([fromCurrency, toCurrency, rateDate])
  @@index([fromCurrency, toCurrency])
  @@index([rateDate])
  @@index([isActive])
}

// Customer Purchase Order model - Track customer POs against quotations
model CustomerPO {
  id          String    @id @default(cuid())
  poNumber    String    @unique
  customerId  String
  customer    Customer  @relation(fields: [customerId], references: [id])
  quotationId String
  quotation   Quotation @relation(fields: [quotationId], references: [id])
  salesCaseId String
  salesCase   SalesCase @relation(fields: [salesCaseId], references: [id])

  // PO details
  poDate       DateTime
  poAmount     Float
  currency     String   @default("USD")
  exchangeRate Float    @default(1.0)

  // Documents
  attachmentUrl String?

  // Status tracking
  isAccepted Boolean   @default(false)
  acceptedAt DateTime?
  acceptedBy String?

  // Linked sales order
  salesOrderId String?     @unique
  salesOrder   SalesOrder? @relation(fields: [salesOrderId], references: [id])

  // Notes
  notes String?

  // Audit fields
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([customerId])
  @@index([quotationId])
  @@index([salesCaseId])
  @@index([poDate])
}

// Case Expense model - Track expenses per sales case
model CaseExpense {
  id          String    @id @default(cuid())
  salesCaseId String
  salesCase   SalesCase @relation(fields: [salesCaseId], references: [id])

  // Expense details
  expenseDate  DateTime
  category     String // Travel, Materials, Labor, etc.
  description  String
  amount       Float
  currency     String   @default("USD")
  exchangeRate Float    @default(1.0)
  baseAmount   Float // Amount in base currency

  // Documentation
  attachmentUrl String?
  receiptNumber String?
  vendor        String?

  // Approval workflow
  status          ExpenseStatus @default(DRAFT)
  approvedBy      String?
  approvedAt      DateTime?
  rejectedBy      String?
  rejectedAt      DateTime?
  rejectionReason String?

  // GL Integration
  accountId      String? // Expense account
  account        Account?      @relation(fields: [accountId], references: [id])
  journalEntryId String? // Link to journal entry
  journalEntry   JournalEntry? @relation(fields: [journalEntryId], references: [id])

  // Audit fields
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([salesCaseId])
  @@index([expenseDate])
  @@index([category])
  @@index([status])
}

// ============================================
// PURCHASE ORDER MANAGEMENT MODELS
// ============================================

// Supplier/Vendor Master Data
model Supplier {
  id             String  @id @default(cuid())
  supplierNumber String  @unique
  name           String
  email          String? @unique
  phone          String?
  website        String?
  address        String?
  taxId          String? // Tax identification number
  currency       String  @default("USD")

  // Financial terms
  paymentTerms Int   @default(30) // Days
  creditLimit  Float @default(0)
  discount     Float @default(0) // Default discount percentage

  // Bank details
  bankName      String?
  bankAccount   String?
  routingNumber String?

  // Contact information
  contactPerson String?
  contactEmail  String?
  contactPhone  String?

  // GL Integration
  accountId String?  @unique // Link to AP account
  account   Account? @relation("SupplierAccount", fields: [accountId], references: [id])

  // System flags
  isActive    Boolean @default(true)
  isPreferred Boolean @default(false)

  // Audit fields
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  purchaseOrders   PurchaseOrder[]
  supplierInvoices SupplierInvoice[]
  supplierPayments SupplierPayment[]
  stockLots        StockLot[]        @relation("SupplierStockLots")

  @@index([supplierNumber])
  @@index([name])
  @@index([isActive])
}

// Purchase Order Header
model PurchaseOrder {
  id         String   @id @default(cuid())
  poNumber   String   @unique
  supplierId String
  supplier   Supplier @relation(fields: [supplierId], references: [id])

  // Order details
  status       POStatus  @default(DRAFT)
  orderDate    DateTime  @default(now())
  expectedDate DateTime? // Expected delivery date
  requestedBy  String? // Who requested this PO

  // Financial totals
  subtotal       Float @default(0)
  taxAmount      Float @default(0)
  discountAmount Float @default(0)
  shippingAmount Float @default(0)
  totalAmount    Float @default(0)

  // Received and invoiced tracking
  receivedAmount Float @default(0)
  invoicedAmount Float @default(0)
  paidAmount     Float @default(0)

  // Terms and conditions
  paymentTerms    String?
  deliveryTerms   String?
  shippingAddress String?
  billingAddress  String?
  notes           String?
  internalNotes   String?

  // Approval workflow
  approvedBy     String?
  approvedAt     DateTime?
  sentToSupplier Boolean   @default(false)
  sentAt         DateTime?

  // Currency support
  currency     String @default("USD")
  exchangeRate Float  @default(1.0)

  // Audit fields
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  items            PurchaseOrderItem[]
  receipts         GoodsReceipt[]
  supplierInvoices SupplierInvoice[]

  @@index([supplierId])
  @@index([status])
  @@index([orderDate])
  @@index([poNumber])
}

// Purchase Order Line Items
model PurchaseOrderItem {
  id              String        @id @default(cuid())
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)

  // Item details
  itemId        String? // Optional link to Item master
  item          Item?    @relation("POItemProduct", fields: [itemId], references: [id])
  itemCode      String
  description   String
  quantity      Float    @default(1)
  unitPrice     Float    @default(0)
  discount      Float    @default(0) // Percentage
  taxRate       Float    @default(0) // Percentage
  taxRateId     String? // Link to tax configuration
  taxRateConfig TaxRate? @relation("POItemTaxRate", fields: [taxRateId], references: [id])

  // Unit of measure
  unitOfMeasureId String?
  unitOfMeasure   UnitOfMeasure? @relation("POItemUoM", fields: [unitOfMeasureId], references: [id])

  // Calculated amounts
  subtotal       Float @default(0)
  discountAmount Float @default(0)
  taxAmount      Float @default(0)
  totalAmount    Float @default(0)

  // Receiving tracking
  quantityReceived Float @default(0)
  quantityInvoiced Float @default(0)

  // Sort order
  sortOrder Int @default(0)

  // Relations
  receiptItems GoodsReceiptItem[]

  @@index([purchaseOrderId])
  @@index([itemId])
}

// Goods Receipt for PO receiving
model GoodsReceipt {
  id              String        @id @default(cuid())
  receiptNumber   String        @unique
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])

  // Receipt details
  receiptDate  DateTime @default(now())
  deliveryNote String? // Supplier delivery note number
  receivedBy   String

  // Quality and condition
  condition String? // "Good", "Damaged", "Incomplete"
  notes     String?

  // Status
  status ReceiptStatus @default(PENDING)

  // Audit fields
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  items          GoodsReceiptItem[]
  stockMovements StockMovement[]    @relation("ReceiptStockMovements")

  @@index([purchaseOrderId])
  @@index([receiptDate])
  @@index([status])
}

// Goods Receipt Line Items
model GoodsReceiptItem {
  id                  String            @id @default(cuid())
  goodsReceiptId      String
  goodsReceipt        GoodsReceipt      @relation(fields: [goodsReceiptId], references: [id], onDelete: Cascade)
  purchaseOrderItemId String
  purchaseOrderItem   PurchaseOrderItem @relation(fields: [purchaseOrderItemId], references: [id])

  // Item details
  itemId           String
  item             Item   @relation("ReceiptItemProduct", fields: [itemId], references: [id])
  itemCode         String
  description      String
  quantityOrdered  Float // From PO
  quantityReceived Float // Actually received
  unitCost         Float // Cost per unit

  // Quality notes
  condition String? // Item condition
  notes     String?

  @@index([goodsReceiptId])
  @@index([purchaseOrderItemId])
  @@index([itemId])
}

// Supplier Invoice (AP Invoice)
model SupplierInvoice {
  id              String         @id @default(cuid())
  invoiceNumber   String         @unique
  supplierId      String
  supplier        Supplier       @relation(fields: [supplierId], references: [id])
  purchaseOrderId String? // Optional link to PO
  purchaseOrder   PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])

  // Invoice details
  invoiceDate  DateTime
  dueDate      DateTime
  paymentTerms String?

  // Financial totals
  subtotal       Float @default(0)
  taxAmount      Float @default(0)
  discountAmount Float @default(0)
  totalAmount    Float @default(0)
  paidAmount     Float @default(0)

  // Status and approval
  status         SupplierInvoiceStatus @default(RECEIVED)
  matchingStatus String? // "MATCHED", "DISCREPANCY", "PENDING"
  approvedBy     String?
  approvedAt     DateTime?

  // Currency support
  currency     String @default("USD")
  exchangeRate Float  @default(1.0)

  // GL Integration
  journalEntryId String?
  journalEntry   JournalEntry? @relation(fields: [journalEntryId], references: [id])

  // Audit fields
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  payments SupplierPayment[]

  @@index([supplierId])
  @@index([purchaseOrderId])
  @@index([status])
  @@index([invoiceDate])
  @@index([dueDate])
}

// Supplier Payments (AP Payments)
model SupplierPayment {
  id                String           @id @default(cuid())
  paymentNumber     String           @unique
  supplierId        String
  supplier          Supplier         @relation(fields: [supplierId], references: [id])
  supplierInvoiceId String?
  supplierInvoice   SupplierInvoice? @relation(fields: [supplierInvoiceId], references: [id])

  // Payment details
  paymentDate   DateTime      @default(now())
  paymentMethod PaymentMethod
  amount        Float
  reference     String? // Check number, wire reference, etc.
  notes         String?

  // Currency support
  currency     String @default("USD")
  exchangeRate Float  @default(1.0)
  baseAmount   Float // Amount in base currency

  // GL Integration
  journalEntryId String?
  journalEntry   JournalEntry? @relation(fields: [journalEntryId], references: [id])

  // Audit fields
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([supplierId])
  @@index([supplierInvoiceId])
  @@index([paymentDate])
  @@index([paymentMethod])
}

// Purchase Order Status Enum
enum POStatus {
  DRAFT // PO being created
  SUBMITTED // PO submitted for approval
  APPROVED // PO approved, ready to send
  ORDERED // PO sent to supplier
  PARTIAL_RECEIVED // Some items received
  RECEIVED // All items received
  PARTIAL_INVOICED // Some items invoiced
  INVOICED // All items invoiced
  COMPLETED // Fully received, invoiced, and paid
  CANCELLED // PO cancelled
  ON_HOLD // PO temporarily on hold
}

// Goods Receipt Status Enum
enum ReceiptStatus {
  PENDING // Receipt created, pending processing
  COMPLETED // Receipt processed and posted to inventory
  REJECTED // Receipt rejected due to quality issues
}

// Supplier Invoice Status Enum
enum SupplierInvoiceStatus {
  RECEIVED // Invoice received
  MATCHED // Matched to PO/Receipt
  APPROVED // Approved for payment
  PAID // Fully paid
  DISPUTED // Invoice disputed
  CANCELLED // Invoice cancelled
}

// ============================================
// TAX CONFIGURATION MODELS
// ============================================

// Tax Categories - for grouping tax rates
model TaxCategory {
  id          String  @id @default(cuid())
  code        String  @unique
  name        String
  description String?

  // System flags
  isActive  Boolean @default(true)
  isDefault Boolean @default(false)

  // Audit fields
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  taxRates TaxRate[]

  @@index([code])
  @@index([isActive])
}

// Tax Rates - actual tax percentages and rules
model TaxRate {
  id          String  @id @default(cuid())
  code        String  @unique
  name        String
  description String?

  // Tax configuration
  rate       Float // Tax percentage (e.g., 5 for 5%)
  categoryId String
  category   TaxCategory @relation(fields: [categoryId], references: [id])

  // Applicability
  taxType   TaxType @default(SALES)
  appliesTo String  @default("ALL") // ALL, PRODUCTS, SERVICES

  // Effective dates
  effectiveFrom DateTime  @default(now())
  effectiveTo   DateTime?

  // System flags
  isActive   Boolean @default(true)
  isDefault  Boolean @default(false)
  isCompound Boolean @default(false) // Tax on tax

  // GL Integration
  collectedAccountId String? // Tax collected account (liability)
  collectedAccount   Account? @relation("TaxCollectedAccount", fields: [collectedAccountId], references: [id])
  paidAccountId      String? // Tax paid account (asset)
  paidAccount        Account? @relation("TaxPaidAccount", fields: [paidAccountId], references: [id])

  // Audit fields
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  quotationItems     QuotationItem[]     @relation("QuotationItemTaxRate")
  salesOrderItems    SalesOrderItem[]    @relation("SalesOrderItemTaxRate")
  invoiceItems       InvoiceItem[]       @relation("InvoiceItemTaxRate")
  purchaseOrderItems PurchaseOrderItem[] @relation("POItemTaxRate")
  taxExemptions      TaxExemption[]

  @@index([code])
  @@index([categoryId])
  @@index([taxType])
  @@index([isActive])
  @@index([effectiveFrom, effectiveTo])
}

// Tax exemptions for specific customers/suppliers
model TaxExemption {
  id String @id @default(cuid())

  // Entity reference
  entityType String // CUSTOMER or SUPPLIER
  entityId   String // Customer or Supplier ID

  // Exemption details
  taxRateId       String? // Specific tax rate exempted (null = all taxes)
  taxRate         TaxRate? @relation(fields: [taxRateId], references: [id])
  exemptionNumber String? // Government-issued exemption number
  reason          String?

  // Validity period
  effectiveFrom DateTime  @default(now())
  effectiveTo   DateTime?

  // Documentation
  attachmentUrl String?

  // System flags
  isActive Boolean @default(true)

  // Audit fields
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([entityType, entityId])
  @@index([taxRateId])
  @@index([isActive])
  @@index([effectiveFrom, effectiveTo])
}

// Enum for Tax Types
enum TaxType {
  SALES // Sales tax/VAT on sales
  PURCHASE // Tax on purchases
  WITHHOLDING // Withholding tax
  EXCISE // Excise duty
  CUSTOMS // Customs duty
  SERVICE // Service tax
  OTHER // Other tax types
}

// ============================================
// COMPANY SETTINGS MODEL
// ============================================

model CompanySettings {
  id          String  @id @default(cuid())
  companyName String  @default("EnXi ERP")
  address     String?
  phone       String?
  email       String?
  website     String?

  // Currency settings
  defaultCurrency String @default("USD")

  // Tax settings
  defaultTaxRateId      String? // Default tax rate for new transactions
  taxRegistrationNumber String? // Company's tax registration number

  // System flags
  isActive Boolean @default(true)

  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  updatedBy String?

  @@index([isActive])
}

// ============================================
// USER MANAGEMENT & RBAC MODELS
// ============================================

model Permission {
  id          String   @id @default(cuid())
  code        String   @unique // e.g., "sales.create", "inventory.update"
  name        String
  description String?
  module      String // sales, inventory, accounting, etc.
  action      String // create, read, update, delete, approve, etc.
  createdAt   DateTime @default(now())

  rolePermissions RolePermission[]
  userPermissions UserPermission[]

  @@index([module])
  @@index([action])
}

model RolePermission {
  id           String     @id @default(cuid())
  role         Role
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id])
  createdAt    DateTime   @default(now())

  @@unique([role, permissionId])
  @@index([role])
}

model UserPermission {
  id           String     @id @default(cuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id])
  granted      Boolean    @default(true) // Can revoke specific permissions
  expiresAt    DateTime? // Temporary permissions
  createdAt    DateTime   @default(now())

  @@unique([userId, permissionId])
  @@index([userId])
  @@index([expiresAt])
}

model UserProfile {
  id                  String    @id @default(cuid())
  userId              String    @unique
  user                User      @relation(fields: [userId], references: [id])
  firstName           String?
  lastName            String?
  phone               String?
  department          String?
  jobTitle            String?
  avatarUrl           String?
  timezone            String    @default("UTC")
  language            String    @default("en")
  lastLoginAt         DateTime?
  lastLoginIp         String?
  failedLoginAttempts Int       @default(0)
  lockedUntil         DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@index([userId])
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  token        String   @unique
  ipAddress    String?
  userAgent    String?
  lastActivity DateTime @default(now())
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

// ============================================
// SALES TEAM MANAGEMENT MODELS
// ============================================

model SalesTeamMember {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  // Sales team details
  salesTarget    Float   @default(0) // Monthly sales target
  commission     Float   @default(0) // Commission percentage
  territory      String? // Sales territory/region
  specialization String? // Product line or industry focus

  // Performance tracking
  currentMonthSales Float @default(0)
  yearToDateSales   Float @default(0)

  // Team assignment
  teamName   String?
  isTeamLead Boolean @default(false)

  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

// ============================================
// MULTI-LOCATION SUPPORT MODELS
// ============================================

// Location/Warehouse Master Data
model Location {
  id           String       @id @default(cuid())
  locationCode String       @unique
  name         String
  type         LocationType @default(WAREHOUSE)
  description  String?

  // Address information
  address    String?
  city       String?
  state      String?
  country    String  @default("US")
  postalCode String?

  // Contact information
  contactPerson String?
  phone         String?
  email         String?

  // Operational details
  isActive           Boolean @default(true)
  isDefault          Boolean @default(false)
  allowNegativeStock Boolean @default(false)

  // Capacity and constraints
  maxCapacity        Float? // Maximum storage capacity
  currentUtilization Float  @default(0) // Current utilization percentage

  // GL Integration
  inventoryAccountId String? // Default inventory account for this location
  inventoryAccount   Account? @relation("LocationInventoryAccount", fields: [inventoryAccountId], references: [id])

  // Audit fields
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  stockMovements     StockMovement[]    @relation("LocationStockMovements")
  stockLots          LocationStockLot[]
  stockTransfersFrom StockTransfer[]    @relation("TransferFromLocation")
  stockTransfersTo   StockTransfer[]    @relation("TransferToLocation")
  inventoryBalances  InventoryBalance[]
  physicalCounts     PhysicalCount[]

  @@index([locationCode])
  @@index([type])
  @@index([isActive])
}

// Location-based Stock Balances
model InventoryBalance {
  id         String   @id @default(cuid())
  locationId String
  location   Location @relation(fields: [locationId], references: [id])
  itemId     String
  item       Item     @relation("ItemLocationBalances", fields: [itemId], references: [id])

  // Balance information
  availableQuantity Float @default(0)
  reservedQuantity  Float @default(0) // Reserved for sales orders
  onOrderQuantity   Float @default(0) // Incoming from purchase orders
  totalQuantity     Float @default(0) // Total physical quantity

  // Costing
  averageCost Float @default(0)
  totalValue  Float @default(0)

  // Stock level management
  minStockLevel Float? // Location-specific minimum
  maxStockLevel Float? // Location-specific maximum
  reorderPoint  Float? // Location-specific reorder point

  // Last updated
  lastMovementDate DateTime?
  lastCountDate    DateTime?

  // Audit fields
  updatedAt DateTime @updatedAt

  @@unique([locationId, itemId])
  @@index([locationId])
  @@index([itemId])
  @@index([availableQuantity])
}

// Location-specific Stock Lots
model LocationStockLot {
  id         String   @id @default(cuid())
  locationId String
  location   Location @relation(fields: [locationId], references: [id])
  stockLotId String
  stockLot   StockLot @relation("LotLocationStock", fields: [stockLotId], references: [id])

  // Location-specific quantities
  availableQty Float @default(0)
  reservedQty  Float @default(0)

  // Storage details
  zone  String? // Storage zone within location
  aisle String? // Aisle reference
  shelf String? // Shelf reference
  bin   String? // Bin reference

  // Last updated
  updatedAt DateTime @updatedAt

  @@unique([locationId, stockLotId])
  @@index([locationId])
  @@index([stockLotId])
  @@index([availableQty])
}

// Stock Transfers between locations
model StockTransfer {
  id             String @id @default(cuid())
  transferNumber String @unique

  // Transfer locations
  fromLocationId String
  fromLocation   Location @relation("TransferFromLocation", fields: [fromLocationId], references: [id])
  toLocationId   String
  toLocation     Location @relation("TransferToLocation", fields: [toLocationId], references: [id])

  // Transfer details
  transferDate DateTime       @default(now())
  expectedDate DateTime?
  status       TransferStatus @default(PENDING)

  // Reason and documentation
  reason        String?
  notes         String?
  attachmentUrl String?

  // Approval workflow
  requestedBy String
  approvedBy  String?
  approvedAt  DateTime?
  shippedBy   String?
  shippedAt   DateTime?
  receivedBy  String?
  receivedAt  DateTime?

  // Totals
  totalQuantity Float @default(0)
  totalValue    Float @default(0)

  // Audit fields
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  items StockTransferItem[]

  @@index([fromLocationId])
  @@index([toLocationId])
  @@index([status])
  @@index([transferDate])
}

// Stock Transfer Line Items
model StockTransferItem {
  id              String        @id @default(cuid())
  stockTransferId String
  stockTransfer   StockTransfer @relation(fields: [stockTransferId], references: [id], onDelete: Cascade)

  // Item details
  itemId     String
  item       Item      @relation("ItemStockTransfers", fields: [itemId], references: [id])
  stockLotId String?
  stockLot   StockLot? @relation("LotStockTransfers", fields: [stockLotId], references: [id])

  // Transfer quantities
  requestedQuantity Float
  shippedQuantity   Float @default(0)
  receivedQuantity  Float @default(0)

  // Costing
  unitCost  Float @default(0)
  totalCost Float @default(0)

  // Quality and condition
  condition String? // Condition on receipt
  notes     String?

  // Sort order
  sortOrder Int @default(0)

  @@index([stockTransferId])
  @@index([itemId])
}

// Physical Inventory Counts
model PhysicalCount {
  id          String   @id @default(cuid())
  countNumber String   @unique
  locationId  String
  location    Location @relation(fields: [locationId], references: [id])

  // Count details
  countDate DateTime    @default(now())
  countType CountType   @default(FULL)
  status    CountStatus @default(PLANNED)

  // Count scope
  categoryFilter String? // Specific category to count
  itemFilter     String? // Specific item to count
  zoneFilter     String? // Specific zone to count

  // Count team
  countedBy  String
  reviewedBy String?
  reviewedAt DateTime?
  approvedBy String?
  approvedAt DateTime?

  // Results summary
  itemsCounted       Int   @default(0)
  adjustmentsFound   Int   @default(0)
  totalVarianceValue Float @default(0)

  // Documentation
  notes         String?
  attachmentUrl String?

  // Audit fields
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  items PhysicalCountItem[]

  @@index([locationId])
  @@index([countDate])
  @@index([status])
}

// Physical Count Line Items
model PhysicalCountItem {
  id              String        @id @default(cuid())
  physicalCountId String
  physicalCount   PhysicalCount @relation(fields: [physicalCountId], references: [id], onDelete: Cascade)

  // Item being counted
  itemId     String
  item       Item      @relation("ItemPhysicalCounts", fields: [itemId], references: [id])
  stockLotId String?
  stockLot   StockLot? @relation("LotPhysicalCounts", fields: [stockLotId], references: [id])

  // Count details
  systemQuantity  Float // Quantity per system
  countedQuantity Float // Physically counted quantity
  variance        Float @default(0) // Difference
  variancePercent Float @default(0) // Percentage variance

  // Costing
  unitCost      Float @default(0)
  varianceValue Float @default(0) // Financial impact of variance

  // Count quality
  confidence      String? // High, Medium, Low
  recountRequired Boolean @default(false)
  notes           String?

  // Adjustment processing
  adjustmentCreated Boolean @default(false)
  adjustmentId      String? // Link to stock movement adjustment

  @@index([physicalCountId])
  @@index([itemId])
  @@index([variance])
}

// Enums for Multi-Location Support
enum LocationType {
  WAREHOUSE // Main warehouse
  STORE // Retail store
  FACTORY // Manufacturing facility
  OFFICE // Office location
  SUPPLIER // Supplier location (for drop shipping)
  CUSTOMER // Customer location (for consignment)
  VIRTUAL // Virtual location (for special purposes)
}

enum TransferStatus {
  PENDING // Transfer requested, awaiting approval
  APPROVED // Transfer approved, ready to ship
  IN_TRANSIT // Items shipped, in transit
  RECEIVED // Items received at destination
  COMPLETED // Transfer completed successfully
  CANCELLED // Transfer cancelled
  REJECTED // Transfer request rejected
}

enum CountType {
  FULL // Full location count
  CYCLE // Cycle count (subset of items)
  SPOT // Spot check (random items)
  CATEGORY // Category-specific count
  ITEM // Single item count
}

enum CountStatus {
  PLANNED // Count scheduled
  IN_PROGRESS // Count in progress
  COMPLETED // Count completed, pending review
  REVIEWED // Count reviewed, pending approval
  APPROVED // Count approved, adjustments can be made
  CANCELLED // Count cancelled
}
